import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { v4 as uuidv4 } from 'uuid';

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

// Dynamic import for CommonJS modules
let gcpDatabaseServicePromise = null;
function getGcpDatabaseService() {
  if (!gcpDatabaseServicePromise) {
    // Use a relative path instead of process.cwd()
    gcpDatabaseServicePromise = import('../../../backend/services/gcpDatabaseService.js')
      .then(module => {
        // Handle both ESM default exports and CommonJS module.exports
        return module.default || module;
      })
      .catch(err => {
        console.error('Error importing GCP database service:', err);
        return null;
      });
  }
  return gcpDatabaseServicePromise;
}

/**
 * GET /api/notes
 * Get all notes for the authenticated user
 */
export async function GET(request) {
  try {
    // Verify authentication (optional in dev)
    const authHeader = request.headers.get('authorization');
    // Use a valid UUID for dev mode instead of a string
    let userId = '00000000-0000-0000-0000-000000000000'; // Valid UUID for dev mode
    
    if (process.env.NODE_ENV === 'production') {
      if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return NextResponse.json(
          { data: null, error: 'Unauthorized' },
          { status: 401 }
        );
      }
      
      const token = authHeader.replace('Bearer ', '');
      const { data: { user }, error } = await supabase.auth.getUser(token);
      
      if (error || !user) {
        return NextResponse.json(
          { data: null, error: 'Invalid token' },
          { status: 401 }
        );
      }
      
      userId = user.id;
    }
    
    // Get query parameters for filtering and pagination
    const url = new URL(request.url);
    const limit = parseInt(url.searchParams.get('limit') || '20', 10);
    const offset = parseInt(url.searchParams.get('offset') || '0', 10);
    const patientId = url.searchParams.get('patientId');
    
    // Get the GCP database service
    const gcpDatabaseService = await getGcpDatabaseService();
    
    if (!gcpDatabaseService) {
      console.error('GCP database service not available');
      return NextResponse.json(
        { data: null, error: 'Database service unavailable' },
        { status: 500 }
      );
    }
    
    try {
      // Query the database for user's notes
      const notes = await gcpDatabaseService.getNotesByUserId(userId, {
        limit,
        offset,
        patientId
      });
      
      return NextResponse.json({
        data: notes,
        error: null
      });
    } catch (dbError) {
      console.error('Error retrieving from database:', dbError);
      return NextResponse.json(
        { data: null, error: `Database error: ${dbError.message}` },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Error getting notes:', error);
    return NextResponse.json(
      { data: null, error: `Failed to get notes: ${error.message}` },
      { status: 500 }
    );
  }
}

/**
 * POST /api/notes
 * Create a new note
 */
export async function POST(request) {
  try {
    // Parse request body
    const body = await request.json();
    
    if (!body.title || !body.transcript) {
      return NextResponse.json(
        { data: null, error: 'Title and transcript are required' },
        { status: 400 }
      );
    }
    
    // Verify authentication (optional in dev)
    const authHeader = request.headers.get('authorization');
    // Use a valid UUID for dev mode instead of a string
    let userId = '00000000-0000-0000-0000-000000000000'; // Valid UUID for dev mode
    
    if (process.env.NODE_ENV === 'production') {
      if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return NextResponse.json(
          { data: null, error: 'Unauthorized' },
          { status: 401 }
        );
      }
      
      const token = authHeader.replace('Bearer ', '');
      const { data: { user }, error } = await supabase.auth.getUser(token);
      
      if (error || !user) {
        return NextResponse.json(
          { data: null, error: 'Invalid token' },
          { status: 401 }
        );
      }
      
      userId = user.id;
    }
    
    // Get the GCP database service
    const gcpDatabaseService = await getGcpDatabaseService();
    
    if (!gcpDatabaseService) {
      console.error('GCP database service not available');
      return NextResponse.json(
        { data: null, error: 'Database service unavailable' },
        { status: 500 }
      );
    }
    
    try {
      // Extract patient info or create a new patient if needed
      let patientId = null;
      if (body.patient) {
        // Check if patient exists or create a new one
        const patientResult = await gcpDatabaseService.findOrCreatePatient({
          userId: userId,
          name: body.patient.name,
          dob: body.patient.dob,
          gender: body.patient.gender,
          mrn: body.patient.mrn
        });
        patientId = patientResult.id;
      }

      // Create note in the database
      const note = await gcpDatabaseService.createNote({
        userId: userId,
        patientId: patientId,
        title: body.title,
        transcript: body.transcript,
        templateId: body.template?.id,
        recordingTime: body.recordingTime,
        soapData: body.soapData,
        metadata: {
          source: 'dictation',
          timestamp: body.timestamp || new Date().toISOString()
        }
      });
      
      console.log('Note saved to GCP database:', note.id);
      
      // Return the created note
      return NextResponse.json({
        data: note,
        error: null
      });
    } catch (dbError) {
      console.error('Error saving to database:', dbError);
      return NextResponse.json(
        { data: null, error: `Database error: ${dbError.message}` },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('Error creating note:', error);
    return NextResponse.json(
      { data: null, error: `Failed to create note: ${error.message}` },
      { status: 500 }
    );
  }
}
